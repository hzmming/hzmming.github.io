(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{619:function(s,t,n){"use strict";n.r(t);var e=n(4),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("tl;dr wsl目前对 GUI 程序支持还不友好，请直接使用 windows 上的cypress")])]),s._v(" "),n("p",[s._v("需要对自己写的 chrome extension 做测试，因为看 vue-devtools 使用了 cypress ，所以对其做了解")]),s._v(" "),n("p",[s._v("一开始就遇到了坎，而且还是因为在 WSL 中使用 cypress 造成的。（WSL你真是让人又爱又恨啊...）")]),s._v(" "),n("p",[s._v("基本的安装过程这里就不说了，看官网即可。这里提下，linux要额外装包，官网都有说。")]),s._v(" "),n("p",[s._v("最开始启动，先报了个错：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("The display compositor is frequently crashing\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("相关"),n("a",{attrs:{href:"https://github.com/cypress-io/cypress/issues/5918",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue"),n("OutboundLink")],1),s._v("，一样的问题，最后人家说升级至 WSL2 即可解决（我是 WSL1)，升级后，确实解决了。")]),s._v(" "),n("p",[s._v("然后再次启动，这回没报错，直接卡死在 "),n("code",[s._v("opening cypress")]),s._v("。这破问题实在是折腾我够久")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 改用这样启动可输出日志信息")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DEBUG")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("cypress:* cypress "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("open")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("输出日志信息大概一看，说的是没找着可用的浏览器，一番思索，")]),s._v(" "),n("p",[s._v("答案：我的浏览器是装在宿主机 win10 上，而 cypress 是在子系统 linux 上。很明显，linux 里面是找不到相关浏览器的。")]),s._v(" "),n("p",[s._v("解决办法："),n("a",{attrs:{href:"https://nickymeuleman.netlify.app/blog/gui-on-wsl2-cypress",target:"_blank",rel:"noopener noreferrer"}},[s._v("Using Graphical User Interfaces like Cypress' in WSL2"),n("OutboundLink")],1)]),s._v(" "),n("blockquote",[n("p",[s._v("扩展知识：")]),s._v(" "),n("p",[s._v("Linux下执行一个GUI程序通常需要两个部分来协调完成，X server与X client。X server是专门负责显示用户界面的，它管理你的显示器，键盘以及鼠标，通常你看到的桌面系统即是由它在背后驱动的，X client则负责程序的逻辑，如果需要使用用户界面，则通过给X server发送请求来完成。通常情况下，X server与X client都运行在同一台机器上，例如我们在Ubuntu上运行任何GUI程序都是这样的。但因为X系统当初设计成是通过socket在X server与X client之间通信的，所以它们也可以运行在不同的机器上。")]),s._v(" "),n("p",[s._v("来源：https://www.jianshu.com/p/24663f3491fa")])]),s._v(" "),n("p",[s._v("第一步：安装 XServer")]),s._v(" "),n("p",[s._v("作者选用了 "),n("a",{attrs:{href:"https://sourceforge.net/projects/vcxsrv/",target:"_blank",rel:"noopener noreferrer"}},[s._v("VcXsrc"),n("OutboundLink")],1),s._v("，下载对应安装包，安装即可。会在桌面上生成  XLaunch 快捷方式。运行它。")]),s._v(" "),n("p",[s._v("**注意！！！**第一次运行 XLaunch，win10会有网络授权弹框，"),n("strong",[s._v("允许公共网络！！！")])]),s._v(" "),n("blockquote",[n("p",[s._v("这一步非常重要，如果没有的话，一会启动 cypress 还是会报错："),n("code",[s._v("can not open display ...")]),s._v("。我就是这一步没细看，漏了。如果已经选错了，还可以在改。")]),s._v(" "),n("p",[s._v("控制面板 - 系统安全 - 允许应用通过 Windows 防火墙 - 更改设置。往下翻，找到 VcXsrv windows xserver，有两个，还有防火墙这里的复杂框实在是没搞懂，反应我全给它勾上了。保存即可")])]),s._v(" "),n("p",[s._v("界面引导选项，前两步默认就“Multiple windows” 和“Start no client”即可，第个引导页，"),n("strong",[s._v("注意！！！")]),s._v(" "),n("strong",[s._v("勾选 Disable access control")])]),s._v(" "),n("p",[s._v("第二步：配置 WSL")]),s._v(" "),n("p",[s._v("这一步，主要是配置将 WSL 中运行的 GUI 程序输出到我们安装的 VcXsrc 上。也就是为 XClient 指定一个 XServer。")]),s._v(" "),n("p",[n("strong",[s._v("设置 DISPLAY 变量")])]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 进入用户目录")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 修配.bashrc")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nano")]),s._v(" .bashrc\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("在 "),n("code",[s._v(".bashrc")]),s._v("最末尾添加以下内容")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set DISPLAY variable to the IP automatically assigned to WSL2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("DISPLAY")])]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /etc/resolv.conf "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" nameserver "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("; exit;}'")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(":0.0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("保存，重启终端")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$DISPLAY")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 172.23.32.1:0.0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出内容，说明配置正确")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("自动启用 dbus")])]),s._v(" "),n("p",[s._v("还是修改 .bashrc 文件，在刚刚加的那句话后，再补一句")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" /etc/init.d/dbus start "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&>")]),s._v(" /dev/null\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("blockquote",[n("p",[s._v("不重启终端，想让其生效，可以执行 "),n("code",[s._v("source ~/.bashrc")])])]),s._v(" "),n("p",[s._v("因为使用了 sudo，我们不想输入密码，就需要做如下设置")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 此命令会以 nano 编辑器打开")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" visudo -f /etc/sudoers.d/dbus\n \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 在打开的编辑中输入如下内容")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# <your_username>替换成自己的用户名，不知道自己用户名，可以用 whoami 命令查看")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所以此处我输入的，实际上是 loryhuang ALL = (root) NOPASSWD: /etc/init.d/dbus")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("your_username"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ALL "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" NOPASSWD: /etc/init.d/dbus\n \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 保存、退出。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nano 的使用方式")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ctrl x： 离开")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Y： 保存")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# enter：回车使用原先的名字")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("第三步：安装浏览器")]),s._v(" "),n("p",[s._v("要知道，XServer 只是显示，核心还是得 XClient，也就是我们的 WSL 里面要有可执行的浏览器。")]),s._v(" "),n("blockquote",[n("p",[s._v("不安装浏览器 cypress 也可以运行，默认使用 headless 模式，并启用自带的 electron")])]),s._v(" "),n("p",[s._v("安装chrome")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 下载chrome安装包")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 安装")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" ./google-chrome-stable_current_amd64.deb\n \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 修复中文乱码")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 参考自：https://github.com/QMonkey/wsl-tutorial")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" fonts-noto-cjk\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("这下，wsl 中执行 google-chrome 便可以打开谷歌浏览器（借助 XServer）。")]),s._v(" "),n("p",[s._v("而 cypress 启动过程中，会尝试使用 chrome、google-chrome、google-chrome-stable 关键字检测谷歌浏览器，这样便可被检测到。")]),s._v(" "),n("p",[s._v("看似都解决了，但很不幸的是，有些背地里运行的服务，还是有问题")]),s._v(" "),n("p",[s._v("启动 cypress 后，控制台其实有抛出错误，")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11846")]),s._v(":0818/185653.087080:ERROR:edid_parser.cc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("102")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Too short EDID data: manufacturer "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11846")]),s._v(":0818/185654.840662:ERROR:bus.cc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("393")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Failed to connect to the bus: Could not parse server address: Unknown address "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("examples of valid types are "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tcp"')]),s._v(" and on UNIX "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unix"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("11846")]),s._v(":0818/185654.898473:ERROR:bus.cc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("393")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Failed to connect to the bus: Could not parse server address: Unknown address "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("examples of valid types are "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tcp"')]),s._v(" and on UNIX "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unix"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("本来想忽略掉，不管，但它却是有影响的。。。")]),s._v(" "),n("p",[s._v("在 vscode 中创建 spec 文件，发现 cy 窗口时的文件没有自动更新，人家官网可说了，它会一直检测得~~")]),s._v(" "),n("p",[s._v("结论：在 WSL 不支持 GUI 程序之前，除非在 windows 上安装 cypress，否则我不用了。。。")])])}),[],!1,null,null,null);t.default=a.exports}}]);